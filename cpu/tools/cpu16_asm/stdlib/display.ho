// void ClearDisplay()
//   Clear the display by zeroing out the numerals and blanking the sign.
//   Args: none
//   Return: none
//
//   Stack on entry:
//     SP-> retaddr

(ClearDisplay)
    @0                  // blank the sign display and zero the 3 digits
    D=A
    @16384              //   0x4000 = 16384 -- display 1  (SCREEN)
    M=D
    @16385              //   0x4001 = 16385 -- display 2
    M=D
    @16386              //   0x4002 = 16386 -- display 3
    M=D
    @18
    D=A
    @16387              //   0x4003 = 16387 -- display 4
    M=D
(ClearDisplay_return)
    @SP                 // pop the return address from the stack and return
    M=M-1
    A=M+1
    A=M
    0;JMP
(ClearDisplay_end)    

// int Getsd()
//   Convert the 3-digit display with sign to an integer and return it.
//   Args: none
//   Return: the value on the display
//
//   Stack on entry:
//     SP-> retaddr
//
//   The return value is written to the global variable "RETVAL".
//

(Getsd)
    @RETVAL             // init the result to 0
    M=0
    
    @16384              // store the display digits
    D=M
    @Getsd_d1
    M=D
    @16385
    D=M
    @Getsd_d2
    M=D
    @16386
    D=M
    @Getsd_d3
    M=D    
    @18                 // no way to enter a neg number so it's always blank, i.e positive                     
    D=A
    @Getsd_sign
    M=D
    
(Getsd_d3_loop)
    @Getsd_d3           // add the number of 100's in d3 to the result, i.e. RETVAL
    D=M
    @Getsd_d2_loop
    D;JEQ
    @100
    D=A
    @RETVAL
    M=D+M
    @Getsd_d3
    M=M-1
    @Getsd_d3_loop
    0;JMP
    
(Getsd_d2_loop)
    @Getsd_d2           // add the number of 10's in d2 to the result
    D=M
    @Getsd_d1_loop
    D;JEQ
    @10
    D=A
    @RETVAL
    M=D+M
    @Getsd_d2
    M=M-1
    @Getsd_d2_loop
    0;JMP
    
(Getsd_d1_loop)
    @Getsd_d1           // add d1 to the result
    D=M
    @RETVAL
    M=D+M               // return the value in D

(Getsd_return)    
    @SP                 // return by popping the return address from the stack
    M=M-1
    A=M+1
    A=M
    0;JMP
(Getsd_end)    

// void Printsd(value)
//   Display the 16-bit integer value as 3 digits and a sign.  The range of 
//   value is -999 to 999.  If value is outside of the allowable range, "----"
//   is displayed.
//   Args:
//     value: the integer value to display
//   Return: none
//
//   Stack on entry:
//     SP-> retaddr
//          value      (SP-1)

(Printsd)
    @SP                 // check for overflow (D <= -1000 | 1000 <= D)
    A=M-1
    D=M
    @CheckOFNeg
    D;JLT
(Printsd_CheckOFPos)    
    @1000               // check for positive overflow
    D=D-A
    @Printsd_NoOverflow
    D;JLT
    @Printsd_Overflow
    0;JMP    
(CheckOFNeg)    
    @1000               // check for negative overflow
    D=D+A
    @Printsd_NoOverflow
    D;JGT
    
(Printsd_Overflow)    
    @16                 // display "----"  
    D=A
    @Printsd_d1
    M=D
    @Printsd_d2
    M=D
    @Printsd_d3
    M=D
    @Printsd_sign
    M=D
    @Printsd_Display_Digits
    0;JMP
    
(Printsd_NoOverflow)      
    @Printsd_d1         // init the digit values to 0
    M=0
    @Printsd_d2
    M=0
    @Printsd_d3
    M=0    
    @18                 // init the sign to a blank
    D=A
    @Printsd_sign
    M=D
    
    @SP                 // if the value is negative negate it and set the negative sign
    A=M-1
    D=M
    @Printsd_d3_loop
    D;JGE
    @SP
    A=M-1
    M=-D
    @16
    D=A
    @Printsd_sign
    M=D
    
(Printsd_d3_loop)       // calculate the number of 100's
    @SP
    A=M-1
    D=M 
    @100
    D=D-A
    @Printsd_d2_loop
    D;JLT
    @SP
    A=M-1
    M=D
    @Printsd_d3
    M=M+1
    @Printsd_d3_loop
    0;JMP
    
(Printsd_d2_loop)       // calculate the number of 10's
    @SP
    A=M-1
    D=M
    @10
    D=D-A
    @Printsd_d1_loop
    D;JLT
    @SP
    A=M-1
    M=D
    @Printsd_d2
    M=M+1
    @Printsd_d2_loop
    0;JMP
    
(Printsd_d1_loop)       // d1 is the remainder
    @SP
    A=M-1
    D=M
    @Printsd_d1
    M=D
    
(Printsd_Display_Digits)
    @Printsd_d1
    D=M
    @16384
    M=D
    @Printsd_d2
    D=M
    @16385
    M=D
    @Printsd_d3
    D=M
    @16386
    M=D

    @Printsd_sign       // set the sign in d4 @ 0x4003
    D=M
    @16387
    M=D

(Printsd_return)    
    @SP                 // pop the return address from the stack and return
    M=M-1
    A=M+1
    A=M
    0;JMP
(Printsd_end)    

// void AppendNum3(value)
//   Shift in the given value to the display into the LS digit.
//   Args:
//     value: value to shift in
//   Return: none
//
//   Stack on entry:
//     SP-> retaddr
//          value       (SP-1)

(AppendNum3)    
    @16385              // left shift the new value into the frame buffer (at 0x4000-0x4002)
    D=M
    @16386
    M=D
    @16384
    D=M
    @16385
    M=D
    @SP
    A=M-1
    D=M
    @16384
    M=D

(AppendNum3_Return)    
    @SP
    M=M-1               // pop the return address and return
    A=M+1
    A=M
    0;JMP
(AppendNum3_End)    

